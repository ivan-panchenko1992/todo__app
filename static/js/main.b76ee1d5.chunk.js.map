{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoForm/TodoForm.jsx","components/TodoFilter/TodoFilter.jsx","App.js","LocalStorage.js","index.js"],"names":["TodoItem","todo","removeTodo","onComplete","addNewTitle","useState","isEdit","setIsEdit","title","editedTitle","setEditTitle","onDoubleClick","className","classNames","completed","editing","type","checked","onChange","id","onClick","value","event","target","onKeyDown","todoToedit","key","handleChangeTitle","TodoList","filteredTodos","length","map","TodoForm","addTodo","setTitle","onSubmit","preventDefault","trim","handleSubmit","placeholder","TodoFilter","changeFilter","filter","href","App","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","todos","setTodos","setFilter","setCompleted","filterTodos","useCallback","filterBy","useMemo","prevTodos","Date","htmlFor","todoId","selectedTodo","find","filterValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b76ee1d5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, removeTodo, onComplete, addNewTitle }) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [editedTitle, setEditTitle] = useState(todo.title);\n\n  const handleChangeTitle = (event, todoToedit) => {\n    if (event.key === 'Enter' && editedTitle !== '') {\n      setIsEdit(false);\n      addNewTitle(todoToedit, editedTitle);\n      setEditTitle('');\n    }\n\n    if (event.key === 'Escape') {\n      setIsEdit(false);\n      setEditTitle(todo.title);\n    }\n  };\n\n  return (\n    <li\n      onDoubleClick={() => setIsEdit(true)}\n      className={classNames(\n        { completed: todo.completed, editing: isEdit },\n      )}\n\n    >\n      <div className={todo.completed ? 'completed' : 'view'}>\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          className=\"toggle\"\n          onChange={() => onComplete(todo.id)}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editedTitle}\n        onChange={event => setEditTitle(event.target.value)}\n        onKeyDown={event => handleChangeTitle(event, todo)}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  addNewTitle: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({\n  filteredTodos,\n  removeTodo,\n  onComplete,\n  addNewTitle,\n}) => (\n  filteredTodos.length > 0\n  && (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo => (\n      <Fragment key={todo.id}>\n        <TodoItem\n          todo={todo}\n          removeTodo={removeTodo}\n          onComplete={onComplete}\n          addNewTitle={addNewTitle}\n        />\n      </Fragment>\n    ))}\n  </ul>\n  ));\n\nTodoList.propTypes = {\n  addNewTitle: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  filteredTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoForm = ({ addTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (title.trim().length > 0) {\n      addTodo(title);\n      setTitle('');\n    }\n\n    setTitle('');\n  };\n\n  return (\n    <form\n      onSubmit={event => handleSubmit(event)}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n\nTodoForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoFilter = ({ changeFilter, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={filter === 'all'\n          ? 'selected' : ''\n        }\n        onClick={() => changeFilter('all')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={filter === 'active'\n          ? 'selected' : ''\n      }\n        onClick={() => changeFilter('active')}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={filter === 'completed'\n          ? 'selected' : ''\n      }\n        onClick={() => changeFilter('completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodoFilter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useLocalStorage } from './LocalStorage';\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filter, setFilter] = useState('all');\n  const [completed, setCompleted] = useState(false);\n\n  const filterTodos = useCallback((filterBy) => {\n    switch (filterBy) {\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, [todos]);\n\n  const addTodo = (title) => {\n    setTodos(prevTodos => [\n      ...prevTodos, {\n        id: +new Date(),\n        title,\n        completed: false,\n      }]);\n  };\n\n  const deleteCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const CheckBoxToggle = () => {\n    if (completed) {\n      setCompleted(false);\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    if (!completed) {\n      setCompleted(true);\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    }\n  };\n\n  const handleComplete = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const addNewTitle = (selectedTodo, editedTitle) => {\n    const findSelectedTodo = todos.find(todo => selectedTodo.id === todo.id);\n\n    findSelectedTodo.title = editedTitle;\n  };\n\n  const changeFilter = filterValue => setFilter(filterValue);\n\n  const filteredTodos = useMemo(\n    () => filterTodos(filter), [filter, filterTodos],\n  );\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoForm\n          addTodo={addTodo}\n          filter={filter}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={CheckBoxToggle}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          filteredTodos={filteredTodos}\n          removeTodo={removeTodo}\n          onComplete={handleComplete}\n          addNewTitle={addNewTitle}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${todos.length} items left`}\n        </span>\n        <TodoFilter\n          changeFilter={changeFilter}\n          filter={filter}\n        />\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={deleteCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore = value instanceof Function\n        ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}